// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ID parameter leads to generating parse_XXXX_param function, as well as error handling 1`] = `
"defmodule EmployeeController do
  @moduledoc false

  use AwesomeWeb, :controller

  action_fallback(AwesomeWeb.FallbackController)

  # add aliases here

  def show(conn, params) do
    with {:ok, id} <- parse_show_params(params) do
      # TODO this is the part you need to implement by yourself
      # TODO evaluate extra arguments, then pass them to render()
      render(conn)
    else
      {:error, :invalid_parameters, params} ->
        {:error, :invalid_parameters, params}

      {:error, :invalid_pointers, pointers} ->
        {:error, :invalid_parameters, pointers}

      {:error, :not_found} ->
        {:error, :not_found}
    end
  end

  defp parse_show_params(params) do
    flat_parse(
      params,
      id: [:id, :required],
    )
  end
end"
`;

exports[`parameter-less action, minimal implementation 1`] = `
"defmodule AwesoneWeb.EmployeesController do
  @moduledoc false

  use AwesomeWeb, :controller

  action_fallback(AwesomeWeb.FallbackController)

  # add aliases here

  def create(conn, _params) do
    # TODO this is the part you need to implement by yourself
    # TODO evaluate extra arguments, then pass them to render()
    render(conn)
  end
end"
`;

exports[`request body leads to generating parse_XXXX_conn function, as well as error handling 1`] = `
"defmodule AwesomeWeb.ProfileController do
  @moduledoc false

  use AwesomeWeb, :controller

  action_fallback(AwesomeWeb.FallbackController)

  # add aliases here

  def update(conn, _params) do
    with {:ok, parsed_opts} <- parse_update_conn(conn) do
      # TODO this is the part you need to implement by yourself
      # TODO evaluate extra arguments, then pass them to render()
      render(conn)
    else
      {:error, :invalid_parameters, params} ->
        {:error, :invalid_parameters, params}

      {:error, :invalid_pointers, pointers} ->
        {:error, :invalid_parameters, pointers}

      {:error, :not_found} ->
        {:error, :not_found}
    end
  end

  defp parse_update_conn(conn) do
    parse(
      conn.assigns[:doc],
      id: [:id, :required],
      attributes: %{
        name: [:string, :required],
        age: [{:integer, min: 18, max: 200}, :required],
        weight: :float,
        birth_date: :date,
        score: :float,
        gender: [:string, :required, {:contain, ~w{male female other}}],
        num1: {:float, min: 10},
        num2: {:float, min: 10},
        num3: {:float, max: 20},
        num4: {:float, max: 20},
        int1: {:integer, min: 11},
        int2: {:integer, min: 10},
        int3: {:integer, max: 19},
        int4: {:integer, max: 20},
      },
      relationships: %{
        location: [:resource_id, :required],
        employee: :resource_id,
      },
    )
  end
end"
`;

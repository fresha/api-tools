// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`serialization array 1`] = `
"import { Expose } from "class-transformer";
import { IsArray } from "class-validator";

export class AnotherResponse {
    
@Expose()
    @IsArray()
    intArray?: number[];
}
"
`;

exports[`serialization numeric limits 1`] = `
"import { Expose } from "class-transformer";
import { Min, Max, IsInt } from "class-validator";

export class Response {
    
@Expose()
    @Min(10)
    @IsInt()
    min?: number;
    
@Expose()
    @Min(15)
    @IsInt()
    minExclusive?: number;
    
@Expose()
    @Max(20)
    @IsInt()
    max?: number;
    
@Expose()
    @Max(25)
    @IsInt()
    maxExclusive?: number;
    
@Expose()
    @Min(10)
    @IsInt()
    intMin?: number;
    
@Expose()
    @Min(16)
    @IsInt()
    intMinExclusive?: number;
    
@Expose()
    @Max(20)
    @IsInt()
    intMax?: number;
    
@Expose()
    @Max(24)
    @IsInt()
    intMaxExclusive?: number;
}
"
`;

exports[`serialization object 1`] = `
"import { Expose, Type } from "class-transformer";
import { IsInt, IsBoolean, IsString } from "class-validator";

export class Employee {
    
@Expose()
    @IsString()
    type: string;
    
@Expose()
    @IsString()
    id: string;
    
@Expose()
    @Type(() => EmployeeAttributes)
    @ValidateNested()
    attributes: EmployeeAttributes;
    
@Expose()
    @Type(() => EmployeeRelationships)
    @ValidateNested()
    relationships: EmployeeRelationships;
}

export class EmployeeAttributes {
    
@Expose()
    @IsString()
    name: string;
    
@Expose()
    @IsInt()
    age?: number;
    
@Expose()
    @IsBoolean()
    active?: boolean;
}

export class EmployeeRelationships {
    
@Expose()
    @Type(() => EmployeeRelationshipsProvider)
    @ValidateNested()
    provider: EmployeeRelationshipsProvider;
}

export class EmployeeRelationshipsProvider {
    
@Expose()
    @Type(() => EmployeeRelationshipsProviderData)
    @ValidateNested()
    data: EmployeeRelationshipsProviderData;
}

export class EmployeeRelationshipsProviderData {
    
@Expose()
    @IsString()
    type: string;
    
@Expose()
    @IsString()
    id: string;
}
"
`;

exports[`serialization primitive schemas + optionality 1`] = `
"import { Expose } from "class-transformer";
import { IsBoolean, IsInt, IsString } from "class-validator";

export class Response {
    
@Expose()
    @IsBoolean()
    optionalBool?: boolean;
    
@Expose()
    @IsBoolean()
    requiredBool: boolean;
    
@Expose()
    @IsInt()
    numeric?: number;
    
@Expose()
    @IsInt()
    requiredNum: number;
    
@Expose()
    @IsString()
    textual?: string;
    
@Expose()
    @IsString()
    requiredText: string;
}
"
`;

exports[`serialization proper name and ouput path 1`] = `
"export class SomeResponse2 {
}
"
`;

exports[`serialization string limits 1`] = `
"import { Expose } from "class-transformer";
import { MinLength, MaxLength, IsString } from "class-validator";

export class Response2 {
    
@Expose()
    @MinLength(1)
    @IsString()
    minLen?: string;
    
@Expose()
    @MaxLength(10)
    @IsString()
    maxLen?: string;
}
"
`;
